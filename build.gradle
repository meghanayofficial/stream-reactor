/*
 * Copyright 2017 Datamountaineer.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
    id "de.undercouch.download" version "3.4.3"
    id "com.github.maiflai.scalatest" version "0.26"
    id "com.github.johnrengelman.shadow" version "5.2.0"
}


// gradle 3.0 intellj fixes
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false


allprojects {
    group = 'com.datamountaineer'
    version = project.version
    description = "stream-reactor"
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'de.undercouch.download'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    // kafka-connect-testcontainers uses junit
    if (!project.name.equals("kafka-connect-testcontainers")) {
        apply plugin: 'com.github.maiflai.scalatest'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8


    ext {
        scalaMajorVersion = '2.12'
        scala = '2.12.11'
        scalaCheck = '1.14.3'
        scalaTest = '3.1.1'
        junit = '4.11'
        testcontainersVersion = '1.15.3'
        //avroVersion="1.8.1"
        scalaLoggingVersion = '3.9.2'
        mockitoVersion = '1.13.9'
        slf4jVersion = "1.7.7"
        json4sVersion = "3.6.7"
        gsonVersion = "2.6.2"
        kcqlVersion = "2.9.1"
        connectCLIVersion = "1.0.6"
        avro4sVersion = "1.6.4"
        smt = "2.0.0"

        // The following 4 need to align to compileagainst a particular version
        confluentVersion = '5.5.0'
        kafkaVersion = '2.5.0'
        link4jVersion = "1.8.0"

        gitCommitHash = ("git rev-parse HEAD").execute().text.trim()
        gitTag = ("git describe --abbrev=0 --tags").execute().text.trim()
        gitRepo = ("git remote get-url origin").execute().text.trim()


        //release
        rootRelease = "${project.rootDir}/release/"
        versionDir = "${rootRelease}/${project.description}-${project.version}-${kafkaVersion}"
        confDir = "${versionDir}/conf"
        libsDir = "${versionDir}/libs"
        binDir = "${versionDir}/bin"
        tarName = "${project.description}-${project.version}-${kafkaVersion}.tar.gz"
        cliUrl = "https://github.com/landoop/kafka-connect-tools/releases/download/v${connectCLIVersion}/connect-cli"
        srCliUrlDarwin = "https://github.com/landoop/schema-registry/releases/download/0.0.1/sr-cli-osx"
        srCliUrlLinux = "https://github.com/landoop/schema-registry/releases/download/0.0.1/sr-cli-linux"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://packages.confluent.io/maven/" }
        maven { url "https://repo.typesafe.com/typesafe/releases/" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        maven { url "https://conjars.org/repo" }
        maven { url "https://jitpack.io"}
    }

    jar {
        manifest {
            attributes( "StreamReactor-Version": project.version,
                    "KCQL-Version" : "${kcqlVersion}",
                    "Kafka-Version": "${kafkaVersion}",
                    "Created-By" : "Lenses",
                    "Created-At" :  new Date().format("YYYYMMDDHHmm"),
                    "Git-Repo": "${gitRepo}",
                    "Git-Commit-Hash": "${gitCommitHash}",
                    "Git-Tag": "${gitTag}",
                    "StreamReactor-Docs" : "https://docs.lenses.io/connectors/"
            )
        }
    }

    shadowJar {
        configurations = [project.configurations.runtime]
        baseName = "${project.name}-${project.version}-${kafkaVersion}-all"
        classifier = null
        version = null

        zip64 true

        manifest {
            attributes( "StreamReactor-Version": project.version,
                    "KCQL-Version" : "${kcqlVersion}",
                    "Kafka-Version": "${kafkaVersion}",
                    "Created-By" : "Lenses",
                    "Created-At" : new Date().format("YYYYMMDDHHmm"),
                    "Git-Repo": "${gitRepo}",
                    "Git-Commit-Hash": "${gitCommitHash}",
                    "Git-Tag": "${gitTag}",
                    "StreamReactor-Docs" : "https://docs.lenses.io/connectors/"
            )
        }

        mergeServiceFiles {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }


        dependencies {
            exclude(dependency("org.apache.avro:.*"))
            exclude(dependency("org.apache.kafka:.*"))
            exclude(dependency("io.confluent:.*"))
            exclude(dependency("org.apache.kafka:.*"))
            exclude(dependency("org.apache.zookeeper:.*"))
            exclude(dependency("com.google.guava:guava:28.1-android"))
        }
    }

    dependencies {

        compile "org.scala-lang:scala-library:$scala"
        compile "org.scala-lang:scala-compiler:$scala"
        compile "com.typesafe.scala-logging:scala-logging_${scalaMajorVersion}:${scalaLoggingVersion}"
        compile "org.apache.kafka:connect-json:$kafkaVersion"
        compile "io.confluent:kafka-connect-avro-converter:$confluentVersion"
        compile "io.confluent:kafka-connect-protobuf-converter:$confluentVersion"
        compile ("io.confluent:kafka-schema-registry:$confluentVersion") {
            exclude group: 'com.google.guava', module: 'guava'
        }

        compile "org.apache.calcite:calcite-linq4j:$link4jVersion"
        compile ("com.datamountaineer:kcql:$kcqlVersion") {
            exclude group: "com.google.guava", module: "guava"
        }

        implementation("com.landoop:kafka-connect-smt_$scalaMajorVersion:$smt") {
            exclude group: "com.google.protobuf"
            exclude group: "org.apache.calcite", module: "calcite-linq4j"
            exclude group: "org.apache.httpcomponents"
        }

        testCompile "org.mockito:mockito-scala_$scalaMajorVersion:$mockitoVersion"
        testCompile "org.scalacheck:scalacheck_$scalaMajorVersion:$scalaCheck"
        testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalaTest"
        testCompile "junit:junit:$junit"

        testCompile 'org.pegdown:pegdown:1.1.0'
        testCompile "com.vladsch.flexmark:flexmark-all:0.35.10"
        testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
    }

    configurations {
        provided
        compile.extendsFrom provided
    }

    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task scaladocJar(type: Jar) {
        classifier = 'scaladoc'
        from '../LICENSE'
        from scaladoc
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }

    task compile(dependsOn: 'compileScala')

    task fatJar(dependsOn: [test, shadowJar])

    task collectJars(type: Copy) {
        into "${buildDir}/libs-dependencies"
        from configurations.runtime
    }

    task collectFatJar(type: Copy, dependsOn: [fatJar]) {
        from "${buildDir}/libs"
        into libsDir
    }

    artifacts {
        archives javadocJar, scaladocJar, sourcesJar
    }

    if (project.hasProperty('release')) {
        signing {
            ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
            required { isReleaseVersion }
            // required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }
    }

    // OSSRH publication
    uploadArchives {
        repositories {
            mavenDeployer {
                // POM signature
                beforeDeployment { MavenDeployment deployment ->
                    signArchives
                    signing.signPom(deployment)
                }
                // Target repository
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name project.name
                    description project.description
                    packaging 'jar'
                    url 'https://github.com/landoop/stream-reactor'

                    scm {
                        connection 'scm:git:https://github.com/lensesio/stream-reactor.git'
                        developerConnection 'scm:git:git@github.com:lensesio/stream-reactor.git'
                        url 'https://github.com/lensesio/stream-reactor.git'
                    }

                    licenses {
                        license {
                            name 'Apache License 2.0'
                            url 'https://www.apache.org/licenses/LICENSE-2.0.html'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'andrewstevenson'
                            name = 'Andrew Stevenson'
                            email = 'andrew@lenses.io'
                        }
                        developer {
                            id = 'stheppi'
                            name = 'Stefan Bocutiu'
                            email = 'stefan@lenses.io'
                        }
                        developer {
                            id = 'antwins'
                            name = 'Antonios Chalkiopoulos'
                            email = 'antonios@lenses.io'
                        }
                    }
                }
            }

        }
    }
}

task prepareReleaseDir(type: Copy) {
    doFirst {
        def root = new File(rootRelease)
        def version = new File(versionDir)
        def bin = new File(binDir)
        def libs = new File(libsDir)
        def conf = new File(confDir)

        root.deleteDir()
        root.mkdirs()
        version.mkdirs()
        libs.mkdirs()
        conf.mkdirs()
        bin.mkdirs()
    }
    from("${project.rootDir}") {
        include "README.md"
        include "LICENSE"
    }
    into versionDir
}

task downloadCli(type: Download, dependsOn: prepareReleaseDir) {
    overwrite false
    src cliUrl
    dest binDir
}

task downloadSchemaCli(type: Download, dependsOn: prepareReleaseDir) {
    overwrite false
    src([srCliUrlDarwin, srCliUrlLinux])
    dest binDir
}


task collectConfs(type: Copy, dependsOn: prepareReleaseDir) {
    from "${project.rootDir}/conf"
    into confDir
}

task collectBin(type: Copy, dependsOn: prepareReleaseDir) {
    from("${project.rootDir}/bin") {
        filter { it.replaceAll('@@CLI_VERSION@@', connectCLIVersion) }
        filter { it.replaceAll('@@STREAM_REACTOR_VERSION@@', "${project.version}-${kafkaVersion}") }
    }
    into binDir
}

task prepareRelease(dependsOn: [downloadCli, downloadSchemaCli, collectConfs, collectBin]) {
    dependsOn subprojects.collectFatJar

    doLast {
        exec {
            commandLine "chmod", "+x", "${binDir}/sr-cli-osx"
            commandLine "chmod", "+x", "${binDir}/sr-cli-linux"
        }
    }
}

task tar(type: Tar, dependsOn: prepareRelease) {
    from rootRelease
    exclude "**.gz"
    archiveName = tarName
    destinationDir = file(rootRelease)
    compression = Compression.GZIP
}

project.tasks.compileScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]
project.tasks.compileTestScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]
